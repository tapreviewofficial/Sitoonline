il tasto ‚ÄúNuova Promozione‚Äù che apre un wizard step-by-step con tutte le sezioni che hai definito.
√à un singolo file React + TypeScript (Vite), basato su react-hook-form e zod per le validazioni, stilizzato con classi Tailwind (coerente con il tuo stack).
Alla fine del wizard invia un POST a /api/promos con il payload gi√† normalizzato.

üìÅ Consigliato salvare questo file come:
client/components/NewPromotionWizard.tsx
e poi importarlo nella tua pagina ‚ÄúPromozioni‚Äù (es. client/pages/Promos.tsx).

‚úÖ Dipendenze necessarie

Assicurati di avere:

npm i react-hook-form @hookform/resolvers zod

üîß File: client/components/NewPromotionWizard.tsx
import React, { useMemo, useState } from "react";
import { useForm, Controller } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

/**
 * =========================================
 *  SCHEMA & TIPI (Zod + React Hook Form)
 * =========================================
 */

const promoSchema = z.object({
  // STEP 1) Dati di base
  title: z.string().min(3, "Titolo obbligatorio (min 3 caratteri)."),
  description: z
    .string()
    .min(10, "Descrizione breve obbligatoria.")
    .max(200, "Max 200 caratteri."),
  type: z.enum(["coupon", "invito", "valore_fisso", "omaggio"], {
    errorMap: () => ({ message: "Seleziona una tipologia." }),
  }),
  internalCode: z.string().optional(),

  // STEP 2) Benefit & condizioni
  valueType: z.enum(["percent", "amount", "none"]).default("none"),
  valueAmount: z
    .number({ invalid_type_error: "Inserisci un numero valido." })
    .optional(),
  notCumulative: z.boolean().default(false),
  onePerCustomer: z.boolean().default(true),
  minSpend: z.number({ invalid_type_error: "Inserisci un importo valido." }).optional(),
  includeCategories: z.array(z.string()).optional(),
  excludeCategories: z.array(z.string()).optional(),

  // STEP 3) Validit√†
  startAt: z.string().min(1, "Data inizio obbligatoria."), // ISO string
  endAt: z.string().min(1, "Data fine obbligatoria."),
  timeWindows: z
    .array(
      z.object({
        start: z.string(), // "18:00"
        end: z.string(), // "22:00"
        days: z.array(z.enum(["mon", "tue", "wed", "thu", "fri", "sat", "sun"])),
      })
    )
    .optional(),
  locations: z.array(z.string()).optional(),
  maxCodes: z
    .number({ invalid_type_error: "Numero massimo obbligatorio." })
    .min(1, "Deve essere > 0"),
  usesPerCode: z
    .number({ invalid_type_error: "Usi per codice obbligatorio." })
    .min(1, "Almeno 1"),

  // STEP 4) Codici/QR
  codeFormat: z.enum(["short", "uuid", "custom_prefix"]),
  codePrefix: z.string().optional(),
  qrMode: z.enum(["url", "jwt"]),
  codeExpiresInHours: z.number({ invalid_type_error: "Inserisci ore valide." }).optional(),

  // STEP 5) Raccolta dati cliente
  askName: z.boolean().default(true),
  askSurname: z.boolean().default(false),
  askEmail: z.boolean().default(true),
  askPhone: z.boolean().default(false),
  privacyConsentRequired: z.boolean().default(true),
  privacyPolicyUrl: z.string().url("URL non valido").optional(),
  landingLang: z.enum(["it", "en"]).default("it"),

  // STEP 6) Pagine e contenuti
  landingTemplate: z.enum(["minimal", "hero", "evento"]).default("minimal"),
  bannerUrl: z.string().optional(),
  landingHeadline: z.string().optional(),
  landingSubtitle: z.string().optional(),
  landingSuccessMsg: z.string().optional(),
  landingUsedOrExpiredMsg: z.string().optional(),
  showCodeAndQr: z.boolean().default(true),
  addToWallet: z.boolean().default(false),
  shareLinkEnabled: z.boolean().default(false),

  // STEP 7) Redemption
  verifyMode: z.enum(["scan", "manual", "both"]).default("scan"),
  softConfirmUse: z.boolean().default(true),
  clerkNoteOnUse: z.boolean().default(false),

  // STEP 8) Limiti/Antifrode
  rateLimitPerEmail24h: z.number({ invalid_type_error: "Inserisci un numero valido." }).optional(),
  fpEnabled: z.boolean().default(false),
  doubleOptIn: z.boolean().default(false),

  // STEP 9) Notifiche & integrazioni
  notifyOnStock80: z.boolean().default(false),
  notifyOnExpire: z.boolean().default(false),
  webhookUrl: z.string().optional(),
  emailCustomerCode: z.boolean().default(false),
  emailReminderBeforeExp: z.boolean().default(false),
});

type PromoFormData = z.infer<typeof promoSchema>;

/**
 * ======================
 *  UTILS / API helper
 * ======================
 */

async function createPromoApi(payload: any) {
  const res = await fetch("/api/promos", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });
  if (!res.ok) {
    const err = await res.json().catch(() => ({}));
    throw new Error(err?.error || "Errore creazione promozione");
  }
  return res.json();
}

/**
 * ======================
 *  COMPONENTE WIZARD
 * ======================
 */

const steps = [
  "Dati base",
  "Benefit & condizioni",
  "Validit√†",
  "Codici / QR",
  "Raccolta dati",
  "Pagine & contenuti",
  "Regole redemption",
  "Limiti / antifrode",
  "Notifiche & integrazioni",
  "Pubblica",
];

const defaultValues: Partial<PromoFormData> = {
  type: "coupon",
  valueType: "none",
  notCumulative: false,
  onePerCustomer: true,
  usesPerCode: 1,
  codeFormat: "short",
  qrMode: "url",
  askName: true,
  askEmail: true,
  privacyConsentRequired: true,
  landingLang: "it",
  landingTemplate: "minimal",
  showCodeAndQr: true,
  verifyMode: "scan",
  softConfirmUse: true,
};

function Section({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <div className="mb-6">
      <h3 className="text-lg font-semibold mb-3">{title}</h3>
      <div className="space-y-3">{children}</div>
    </div>
  );
}

function Field({
  label,
  error,
  children,
}: {
  label: string;
  error?: string;
  children: React.ReactNode;
}) {
  return (
    <div>
      <label className="block text-sm font-medium mb-1">{label}</label>
      {children}
      {error && <p className="text-xs text-red-500 mt-1">{error}</p>}
    </div>
  );
}

export default function NewPromotionWizard() {
  const [open, setOpen] = useState(false);
  const [activeStep, setActiveStep] = useState(0);

  const {
    control,
    register,
    handleSubmit,
    watch,
    formState: { errors, isSubmitting },
  } = useForm<PromoFormData>({
    defaultValues: defaultValues as any,
    resolver: zodResolver(promoSchema),
    mode: "onChange",
  });

  const type = watch("type");
  const valueType = watch("valueType");

  const nextDisabled = useMemo(() => {
    // eventuali regole di abilitazione step-by-step
    return false;
  }, [activeStep]);

  async function onSubmit(data: PromoFormData) {
    // Validazioni logiche addizionali
    const start = new Date(data.startAt);
    const end = new Date(data.endAt);
    if (end < start) {
      alert("La data di fine deve essere >= data inizio.");
      return;
    }
    if (data.type === "coupon" && data.valueType === "none") {
      alert("Per i coupon devi impostare percentuale o importo fisso.");
      return;
    }
    if (data.valueType === "percent" && (!data.valueAmount || data.valueAmount <= 0 || data.valueAmount > 100)) {
      alert("Percentuale non valida (1‚Äì100).");
      return;
    }
    if (data.valueType === "amount" && (!data.valueAmount || data.valueAmount <= 0)) {
      alert("Importo fisso deve essere > 0.");
      return;
    }
    if (data.maxCodes <= 0) {
      alert("Stock massimo deve essere > 0.");
      return;
    }

    // Normalizza payload per API
    const payload = {
      title: data.title,
      description: data.description,
      type: data.type, // "coupon" | "invito" | "valore_fisso" | "omaggio"
      internalCode: data.internalCode || null,

      // condizioni/benefit
      value: data.valueType === "percent" ? { kind: "percent", amount: data.valueAmount } :
             data.valueType === "amount"  ? { kind: "amount", amount: data.valueAmount } :
             { kind: "none" },
      notCumulative: data.notCumulative,
      onePerCustomer: data.onePerCustomer,
      minSpend: data.minSpend || null,
      includeCategories: data.includeCategories || [],
      excludeCategories: data.excludeCategories || [],

      // validit√†
      startAt: data.startAt,
      endAt: data.endAt,
      timeWindows: data.timeWindows || [],
      locations: data.locations || [],
      maxCodes: data.maxCodes,
      usesPerCode: data.usesPerCode,

      // codici/qr
      codeFormat: data.codeFormat,       // "short" | "uuid" | "custom_prefix"
      codePrefix: data.codePrefix || null,
      qrMode: data.qrMode,               // "url" | "jwt"
      codeExpiresInHours: data.codeExpiresInHours || null,

      // raccolta dati landing
      fields: {
        name: data.askName,
        surname: data.askSurname,
        email: data.askEmail,
        phone: data.askPhone,
      },
      privacy: {
        required: data.privacyConsentRequired,
        policyUrl: data.privacyPolicyUrl || null,
      },
      landing: {
        lang: data.landingLang,
        template: data.landingTemplate, // "minimal" | "hero" | "evento"
        bannerUrl: data.bannerUrl || null,
        headline: data.landingHeadline || "",
        subtitle: data.landingSubtitle || "",
        successMsg: data.landingSuccessMsg || "Grazie! Ecco il tuo codice.",
        usedOrExpiredMsg: data.landingUsedOrExpiredMsg || "Codice non valido o gi√† usato.",
        showCodeAndQr: data.showCodeAndQr,
        addToWallet: data.addToWallet,
        shareLinkEnabled: data.shareLinkEnabled,
      },

      // redemption
      redemption: {
        verifyMode: data.verifyMode, // "scan" | "manual" | "both"
        softConfirmUse: data.softConfirmUse,
        clerkNoteOnUse: data.clerkNoteOnUse,
      },

      // limiti/antifrode
      limits: {
        rateLimitPerEmail24h: data.rateLimitPerEmail24h || null,
        fingerprint: data.fpEnabled,
        doubleOptIn: data.doubleOptIn,
      },

      // notifiche & integrazioni
      notifications: {
        notifyOnStock80: data.notifyOnStock80,
        notifyOnExpire: data.notifyOnExpire,
        webhookUrl: data.webhookUrl || null,
        emailCustomerCode: data.emailCustomerCode,
        emailReminderBeforeExp: data.emailReminderBeforeExp,
      },
    };

    try {
      const created = await createPromoApi(payload);
      alert("Promozione creata con successo!");
      setOpen(false);
      console.log("Promo created:", created);
    } catch (e: any) {
      alert(e?.message || "Errore creazione promozione");
    }
  }

  return (
    <>
      {/* Tasto ‚ÄúNuova promozione‚Äù */}
      <button
        onClick={() => setOpen(true)}
        className="px-4 py-2 rounded bg-amber-600 hover:bg-amber-700 text-white font-semibold"
      >
        + Nuova Promozione
      </button>

      {/* Modal Wizard */}
      {open && (
        <div className="fixed inset-0 z-50 flex items-start justify-center bg-black/50 p-4 overflow-auto">
          <div className="bg-zinc-900 text-white w-full max-w-4xl rounded-lg shadow-xl p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold">Crea nuova promozione</h2>
              <button onClick={() => setOpen(false)} className="text-zinc-400 hover:text-white">‚úï</button>
            </div>

            {/* Stepper */}
            <div className="flex overflow-x-auto gap-2 mb-6">
              {steps.map((s, i) => (
                <div
                  key={i}
                  className={`px-3 py-1 rounded-full text-sm whitespace-nowrap ${
                    i === activeStep ? "bg-amber-600" : "bg-zinc-800"
                  }`}
                >
                  {i + 1}. {s}
                </div>
              ))}
            </div>

            <form
              onSubmit={handleSubmit(onSubmit)}
              className="space-y-6"
            >
              {activeStep === 0 && (
                <>
                  <Section title="1) Dati di base">
                    <Field label="Titolo promozione" error={errors.title?.message}>
                      <input className="w-full bg-zinc-800 rounded px-3 py-2" {...register("title")} placeholder='es. "-10% primo acquisto"' />
                    </Field>

                    <Field label="Descrizione breve" error={errors.description?.message}>
                      <textarea className="w-full bg-zinc-800 rounded px-3 py-2" rows={3} {...register("description")} />
                    </Field>

                    <Field label="Tipologia" error={errors.type?.message}>
                      <select className="w-full bg-zinc-800 rounded px-3 py-2" {...register("type")}>
                        <option value="coupon">Coupon sconto</option>
                        <option value="invito">Invito evento</option>
                        <option value="valore_fisso">Promo a valore fisso</option>
                        <option value="omaggio">Omaggio</option>
                      </select>
                    </Field>

                    <Field label="Codice interno (SKU/Tag)">
                      <input className="w-full bg-zinc-800 rounded px-3 py-2" {...register("internalCode")} placeholder="facoltativo" />
                    </Field>
                  </Section>
                </>
              )}

              {activeStep === 1 && (
                <Section title="2) Benefit e condizioni">
                  <Field label="Valore promo (se coupon)">
                    <div className="grid grid-cols-2 gap-2">
                      <select className="bg-zinc-800 rounded px-3 py-2" {...register("valueType")}>
                        <option value="none">‚Äî Nessuno ‚Äî</option>
                        <option value="percent">Percentuale %</option>
                        <option value="amount">Importo fisso ‚Ç¨</option>
                      </select>
                      {(valueType === "percent" || valueType === "amount") && (
                        <input
                          type="number"
                          step="0.01"
                          className="bg-zinc-800 rounded px-3 py-2"
                          {...register("valueAmount", { valueAsNumber: true })}
                          placeholder={valueType === "percent" ? "es. 10 (%)" : "es. 5.00 (‚Ç¨)"}
                        />
                      )}
                    </div>
                  </Field>

                  <div className="flex items-center gap-3">
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("notCumulative")} /> Non cumulabile
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("onePerCustomer")} /> 1 per cliente
                    </label>
                  </div>

                  <Field label="Soglia minima di spesa (‚Ç¨)">
                    <input type="number" step="0.01" className="bg-zinc-800 rounded px-3 py-2" {...register("minSpend", { valueAsNumber: true })} />
                  </Field>

                  {/* Multi-select placeholder */}
                  <div className="grid grid-cols-2 gap-2">
                    <Field label="Categorie incluse">
                      <input
                        className="bg-zinc-800 rounded px-3 py-2"
                        placeholder="es. 'Borse, Scarpe' (CSV)"
                        onChange={(e) =>
                          (e.target as HTMLInputElement).value
                        }
                        {...register("includeCategories", {
                          setValueAs: (val: string) =>
                            typeof val === "string" && val.length
                              ? val.split(",").map((s) => s.trim())
                              : [],
                        })}
                      />
                    </Field>
                    <Field label="Categorie escluse">
                      <input
                        className="bg-zinc-800 rounded px-3 py-2"
                        placeholder="es. 'Outlet' (CSV)"
                        {...register("excludeCategories", {
                          setValueAs: (val: string) =>
                            typeof val === "string" && val.length
                              ? val.split(",").map((s) => s.trim())
                              : [],
                        })}
                      />
                    </Field>
                  </div>
                </Section>
              )}

              {activeStep === 2 && (
                <Section title="3) Validit√†">
                  <div className="grid grid-cols-2 gap-2">
                    <Field label="Data inizio" error={errors.startAt?.message}>
                      <input type="datetime-local" className="bg-zinc-800 rounded px-3 py-2" {...register("startAt")} />
                    </Field>
                    <Field label="Data fine" error={errors.endAt?.message}>
                      <input type="datetime-local" className="bg-zinc-800 rounded px-3 py-2" {...register("endAt")} />
                    </Field>
                  </div>

                  <Field label="Sedi (multi, CSV)">
                    <input
                      className="bg-zinc-800 rounded px-3 py-2"
                      placeholder="es. Sede1,Sede2"
                      {...register("locations", {
                        setValueAs: (val: string) =>
                          typeof val === "string" && val.length
                            ? val.split(",").map((s) => s.trim())
                            : [],
                      })}
                    />
                  </Field>

                  <div className="grid grid-cols-2 gap-2">
                    <Field label="Numero massimo codici">
                      <input type="number" className="bg-zinc-800 rounded px-3 py-2" {...register("maxCodes", { valueAsNumber: true })} />
                    </Field>
                    <Field label="Utilizzi per codice">
                      <input type="number" className="bg-zinc-800 rounded px-3 py-2" {...register("usesPerCode", { valueAsNumber: true })} />
                    </Field>
                  </div>
                </Section>
              )}

              {activeStep === 3 && (
                <Section title="4) Generazione codici / QR">
                  <div className="grid grid-cols-2 gap-2">
                    <Field label="Formato codice">
                      <select className="bg-zinc-800 rounded px-3 py-2" {...register("codeFormat")}>
                        <option value="short">Alfanumerico breve (8‚Äì10)</option>
                        <option value="uuid">UUID</option>
                        <option value="custom_prefix">Custom prefix</option>
                      </select>
                    </Field>
                    <Field label="Prefix (se custom)">
                      <input className="bg-zinc-800 rounded px-3 py-2" {...register("codePrefix")} placeholder="es. VIP-" />
                    </Field>
                  </div>

                  <div className="grid grid-cols-2 gap-2">
                    <Field label="QR payload mode">
                      <select className="bg-zinc-800 rounded px-3 py-2" {...register("qrMode")}>
                        <option value="url">URL con querystring</option>
                        <option value="jwt">Token firmato (JWT)</option>
                      </select>
                    </Field>
                    <Field label="Scadenza del singolo codice (ore)">
                      <input type="number" className="bg-zinc-800 rounded px-3 py-2" {...register("codeExpiresInHours", { valueAsNumber: true })} />
                    </Field>
                  </div>
                </Section>
              )}

              {activeStep === 4 && (
                <Section title="5) Raccolta dati cliente (landing)">
                  <div className="grid grid-cols-2 gap-2">
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("askName")} /> Nome
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("askSurname")} /> Cognome
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("askEmail")} /> Email
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("askPhone")} /> Telefono
                    </label>
                  </div>

                  <div className="grid grid-cols-2 gap-2">
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("privacyConsentRequired")} /> Consenso privacy obbligatorio
                    </label>
                    <Field label="URL Privacy Policy">
                      <input className="bg-zinc-800 rounded px-3 py-2" {...register("privacyPolicyUrl")} placeholder="https://‚Ä¶" />
                    </Field>
                  </div>

                  <Field label="Lingua landing">
                    <select className="bg-zinc-800 rounded px-3 py-2" {...register("landingLang")}>
                      <option value="it">IT</option>
                      <option value="en">EN</option>
                    </select>
                  </Field>
                </Section>
              )}

              {activeStep === 5 && (
                <Section title="6) Pagine & contenuti">
                  <Field label="Template">
                    <select className="bg-zinc-800 rounded px-3 py-2" {...register("landingTemplate")}>
                      <option value="minimal">Minimal</option>
                      <option value="hero">Hero con immagine</option>
                      <option value="evento">Evento</option>
                    </select>
                  </Field>

                  <Field label="Banner/Immagine">
                    <input className="bg-zinc-800 rounded px-3 py-2" {...register("bannerUrl")} placeholder="https://‚Ä¶" />
                  </Field>

                  <Field label="Headline">
                    <input className="bg-zinc-800 rounded px-3 py-2" {...register("landingHeadline")} />
                  </Field>

                  <Field label="Sottotitolo">
                    <input className="bg-zinc-800 rounded px-3 py-2" {...register("landingSubtitle")} />
                  </Field>

                  <Field label="Messaggio conferma (post submit)">
                    <input className="bg-zinc-800 rounded px-3 py-2" {...register("landingSuccessMsg")} placeholder="Grazie! Ecco il tuo codice." />
                  </Field>

                  <Field label="Messaggio 'gi√† usato/scaduto'">
                    <input className="bg-zinc-800 rounded px-3 py-2" {...register("landingUsedOrExpiredMsg")} />
                  </Field>

                  <div className="grid grid-cols-3 gap-2">
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("showCodeAndQr")} /> Mostra codice + QR
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("addToWallet")} /> Aggiungi a Wallet
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("shareLinkEnabled")} /> Link di condivisione
                    </label>
                  </div>
                </Section>
              )}

              {activeStep === 6 && (
                <Section title="7) Regole di redemption">
                  <Field label="Metodo verifica">
                    <select className="bg-zinc-800 rounded px-3 py-2" {...register("verifyMode")}>
                      <option value="scan">Scan QR in-browser</option>
                      <option value="manual">Inserimento manuale</option>
                      <option value="both">Entrambi</option>
                    </select>
                  </Field>

                  <div className="grid grid-cols-2 gap-2">
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("softConfirmUse")} /> Conferma utilizzo (soft confirm)
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("clerkNoteOnUse")} /> Note commesso al momento convalida
                    </label>
                  </div>
                </Section>
              )}

              {activeStep === 7 && (
                <Section title="8) Limiti / Antifrode">
                  <Field label="Rate limit generazione (per email/24h)">
                    <input type="number" className="bg-zinc-800 rounded px-3 py-2" {...register("rateLimitPerEmail24h", { valueAsNumber: true })} />
                  </Field>
                  <div className="grid grid-cols-2 gap-2">
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("fpEnabled")} /> Device fingerprint
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("doubleOptIn")} /> Double opt-in via email
                    </label>
                  </div>
                </Section>
              )}

              {activeStep === 8 && (
                <Section title="9) Notifiche & integrazioni">
                  <div className="grid grid-cols-3 gap-2">
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("notifyOnStock80")} /> Notifica 80% stock
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("notifyOnExpire")} /> Notifica alla scadenza
                    </label>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("emailCustomerCode")} /> Email codice/QR al cliente
                    </label>
                  </div>
                  <div className="grid grid-cols-2 gap-2">
                    <Field label="Webhook URL (CRM)">
                      <input className="bg-zinc-800 rounded px-3 py-2" {...register("webhookUrl")} placeholder="https://‚Ä¶" />
                    </Field>
                    <label className="flex items-center gap-2">
                      <input type="checkbox" {...register("emailReminderBeforeExp")} /> Reminder pre-scadenza via email
                    </label>
                  </div>
                </Section>
              )}

              {activeStep === 9 && (
                <Section title="10) Pubblica & Anteprima">
                  <p className="text-sm text-zinc-300">
                    Rivedi i dati inseriti. Puoi testare la landing in anteprima e pubblicare la promozione.
                  </p>
                  {/* Qui potresti aggiungere un riquadro di riepilogo */}
                </Section>
              )}

              {/* Footer: azioni stepper */}
              <div className="flex items-center justify-between pt-2 border-t border-zinc-800">
                <button
                  type="button"
                  onClick={() => setActiveStep((s) => Math.max(0, s - 1))}
                  className="px-4 py-2 rounded bg-zinc-800 hover:bg-zinc-700"
                  disabled={activeStep === 0}
                >
                  ‚Üê Indietro
                </button>
                {activeStep < steps.length - 1 ? (
                  <button
                    type="button"
                    onClick={() => setActiveStep((s) => Math.min(steps.length - 1, s + 1))}
                    className="px-4 py-2 rounded bg-amber-600 hover:bg-amber-700 text-white"
                    disabled={nextDisabled}
                  >
                    Avanti ‚Üí
                  </button>
                ) : (
                  <button
                    type="submit"
                    className="px-4 py-2 rounded bg-amber-600 hover:bg-amber-700 text-white disabled:opacity-50"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? "Pubblico‚Ä¶" : "Pubblica promozione"}
                  </button>
                )}
              </div>
            </form>
          </div>
        </div>
      )}
    </>
  );
}

üìå Come usare il componente

In una pagina, esempio client/pages/Promos.tsx:

import NewPromotionWizard from "../components/NewPromotionWizard";

export default function PromosPage() {
  return (
    <div className="p-6">
      <div className="mb-4 flex items-center justify-between">
        <h1 className="text-2xl font-bold">Promozioni</h1>
        <NewPromotionWizard />
      </div>

      {/* ...lista promozioni... */}
    </div>
  );
}

üõ†Ô∏è Backend: shape dell‚ÄôAPI /api/promos

Il payload inviato √® gi√† normalizzato (vedi payload in onSubmit).
Prepara nel backend un endpoint tipo:

// POST /api/promos
// Body = payload del wizard
// - valida i campi (title, description, type, period, maxCodes, usesPerCode‚Ä¶)
// - salva in tabella Promo (e tabelle correlate se usi JSON/relazioni)
// - rispondi con { id, ... } o { ok: true }