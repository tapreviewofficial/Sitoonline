0) Imposta i Secrets su Replit

SUPABASE_URL → URL del progetto

SUPABASE_SERVICE_ROLE_KEY → Service Role key (⚠️ resta solo sul server)

(Non serve la anon key nel backend.)

1) SQL iniziale (eseguilo su Supabase una volta)
-- Tabella base
create table if not exists promotions (
  id uuid primary key default gen_random_uuid(),
  title text not null,
  description text,
  valid_until date,
  is_active boolean default false,
  max_qr integer default 0,
  created_at timestamptz default now()
);

-- Attiva RLS (di default blocca tutto: più sicuro)
alter table promotions enable row level security;

-- Nessuna policy = nessun accesso da client pubblici.
-- Il tuo server userà la Service Role e bypasserà RLS in sicurezza.

2) Installa dipendenze (Shell Replit)
npm i express @supabase/supabase-js cors helmet express-rate-limit zod

3) package.json (aggiungi lo script start)
{
  "type": "module",
  "scripts": {
    "start": "node server.js"
  }
}

4) lib/supabaseAdmin.js
import { createClient } from '@supabase/supabase-js';

const url = process.env.SUPABASE_URL;
const serviceRole = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!url || !serviceRole) {
  throw new Error('Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY');
}

// Client amministrativo (bypassa RLS) — NON esporre mai al browser
export const supabaseAdmin = createClient(url, serviceRole);

5) schema/promo.js
import { z } from 'zod';

export const PromoInsertSchema = z.object({
  title: z.string().min(1).max(160),
  description: z.string().max(2000).optional().default(''),
  valid_until: z.string().regex(/^\d{4}-\d{2}-\d{2}$/).optional(), // ISO date YYYY-MM-DD
  is_active: z.boolean().optional().default(false),
  max_qr: z.number().int().min(0).max(100000).optional().default(0)
});

6) server.js
import express from 'express';
import helmet from 'helmet';
import cors from 'cors';
import rateLimit from 'express-rate-limit';
import { supabaseAdmin } from './lib/supabaseAdmin.js';
import { PromoInsertSchema } from './schema/promo.js';

const app = express();

// 🔐 Security & limits
app.use(helmet());
app.use(express.json({ limit: '100kb' }));
app.use(rateLimit({ windowMs: 60_000, max: 60 })); // 60 req/min per IP

// 🔒 CORS: consenti solo il tuo dominio Replit (metti quello del tuo repl)
const allowed = [
  /https?:\/\/.*\.replit\.dev$/,
  /https?:\/\/.*\.repl\.co$/
  // aggiungi qui il tuo dominio custom quando lo userai
];
app.use(
  cors({
    origin: (origin, cb) => {
      if (!origin) return cb(null, true); // curl / server-to-server
      const ok = allowed.some((re) => re.test(origin));
      cb(ok ? null : new Error('Not allowed by CORS'), ok);
    },
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
  })
);

// 🧪 Health
app.get('/', (_req, res) => res.json({ ok: true, ts: new Date().toISOString() }));

// 📄 READ (lista promo)
app.get('/promos', async (_req, res) => {
  const { data, error } = await supabaseAdmin
    .from('promotions')
    .select('*')
    .order('created_at', { ascending: false });
  if (error) return res.status(500).json({ error: error.message });
  res.json(data ?? []);
});

// ➕ CREATE (inserisci promo)
app.post('/promos', async (req, res) => {
  const parsed = PromoInsertSchema.safeParse(req.body);
  if (!parsed.success) {
    return res.status(400).json({ error: 'Invalid payload', details: parsed.error.flatten() });
  }
  const { data, error } = await supabaseAdmin
    .from('promotions')
    .insert(parsed.data)
    .select()
    .single();
  if (error) return res.status(500).json({ error: error.message });
  res.status(201).json(data);
});

// Error handler compatto
app.use((err, _req, res, _next) => {
  res.status(500).json({ error: err.message || 'Server error' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => console.log(`Secure API on :${PORT}`));

7) Test rapidi (Shell Replit)
curl -s http://localhost:3000/
curl -s http://localhost:3000/promos
curl -s -X POST http://localhost:3000/promos -H "Content-Type: application/json" \
  -d '{"title":"Promo Test","description":"Hello","valid_until":"2025-12-31","is_active":true,"max_qr":100}'

Perché questa è la più sicura & comoda

Service Role solo nel backend → chiavi mai esposte al browser.

RLS abilitata e nessuna policy pubblica → qualsiasi accesso diretto dal client è bloccato.

Helmet + rate-limit + CORS ristretto + validazione Zod → hardening out-of-the-box.

Copy-paste minimale: 3 file + 1 comando + 2 secrets.