generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TicketStatus {
  ACTIVE
  USED
  EXPIRED
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  username    String       @unique
  createdAt   DateTime     @default(now())
  role        Role         @default(USER)
  links       Link[]
  profile     Profile?
  publicPages PublicPage[]
  promos      Promo[]

  @@map("users")
}

model Profile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  displayName String?
  bio         String?
  avatarUrl   String?
  accentColor String? @default("#CC9900")
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Link {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  order     Int      @default(0)
  userId    Int
  createdAt DateTime @default(now())
  clicks    Int      @default(0)
  Click     Click[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("links")
}

model Click {
  id        Int      @id @default(autoincrement())
  linkId    Int
  createdAt DateTime @default(now())
  userAgent String?
  referer   String?
  ipHash    String?
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("clicks")
}

model PublicPage {
  id        Int      @id @default(autoincrement())
  userId    Int
  slug      String   @unique
  title     String?
  theme     String?  // JSON string per colori, layout, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  promos    Promo[]

  @@map("public_pages")
}

model Promo {
  id           Int         @id @default(autoincrement())
  userId       Int
  publicPageId Int?
  title        String
  description  String?
  type         String      // "invito" | "coupon" | "promo"
  startAt      DateTime?
  endAt        DateTime?
  active       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  publicPage   PublicPage? @relation(fields: [publicPageId], references: [id])
  tickets      Ticket[]

  @@map("promos")
}

model Ticket {
  id            Int          @id @default(autoincrement())
  promoId       Int
  customerName  String?
  customerEmail String?
  code          String       @unique
  qrPayload     String
  status        TicketStatus @default(ACTIVE)
  expiresAt     DateTime?
  usedAt        DateTime?
  createdAt     DateTime     @default(now())
  promo         Promo        @relation(fields: [promoId], references: [id], onDelete: Cascade)
  scans         ScanLog[]

  @@map("tickets")
}

model ScanLog {
  id       Int      @id @default(autoincrement())
  ticketId Int
  userId   Int?     // chi ha scansionato (commesso)
  result   String   // "valid"|"expired"|"used"
  at       DateTime @default(now())
  meta     String?  // userAgent, ip hash, device info
  ticket   Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("scan_logs")
}
